
public class Map {
	private int[][] map;
	private boolean[][][] isPossible;
	private int n;
	public int originalX;
	public int originalY;
	public int originalTheta;
	
	public int cX;
	public int cY;
	public int cT;
	
	public Map(int n)    //create the map here
	{
		this.n=n;
		map=new int[n][n];
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				map[i][j]=0;
			}
		}
		
		map[0][0]=1;
		map[2][1]=1;
		map[3][1]=1;
		map[1][3]=1;
		
		
		isPossible=new boolean[n][n][4];
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				for (int k=0;k<4;k++)
				{
					isPossible[i][j][k]=true; //set every positions to possible initial positions
				}
			}
		}
	}
	public String getCommand(String path,int b)
	{
		int[] a=new int[path.length()];
		String result="";
		for (int i=0;i<path.length();i++)
		{
			String temp=path.substring(i,i+1);
			a[i]=Integer.parseInt(temp);
			if (a[i]!=4) 
			{
				a[i]+=b;
				if (a[i]>3) 
					a[i]-=4;
			}
			result+=a[i];
		}
		return(result);
	}  //simulation of the robot travelling around the map.
	
	
	public String getPath(int x, int y, String path)//get the path, if there is a obstable put 1 in the string,
	{
		String result="";// else if there is no obstacle, put 0 in the string, if there is no such a place , put 2 in the string.
		int currentX=x;
		int currentY=y;//finally, return the string as the result of the simulation of the robot, and check if the string is 
		char d = '0';
		for (int i=0;i<path.length();i++)//the same as the string generated by the real robot
		{
			if (path.charAt(i)<'4')//if they are the same, then the position is a potential initial position
			{
				d=path.charAt(i);//if not, the position is not a possible initial position.
			}
			if (path.charAt(i)=='4'){
				if (d=='0')
					currentY-=1;
				if (d=='1')
					currentX+=1;
				if (d=='2')
					currentY+=1;
				if (d=='3')
					currentX-=1;
			}
			if (currentX<0||currentX>3||currentY<0||currentY>3)
				result+="2";
			else if (map[currentX][currentY]==1)
			{
				result+="2";
			} else if (d=='0')
			{
				currentY-=1;
				if (currentX<0||currentX>3||currentY<0||currentY>3)
					result+="1";
				else if (map[currentX][currentY]==1)
					result+="1";
				else
					result+="0";
				currentY+=1;
			} else if (d=='1')
			{
				currentX+=1;
				if (currentX<0||currentX>3||currentY<0||currentY>3)
					result+="1";
				else if (map[currentX][currentY]==1)
					result+="1";
				else
					result+="0";
				currentX-=1;
			} else if (d=='2')
			{
				currentY+=1;
				if (currentX<0||currentX>3||currentY<0||currentY>3)
					result+="1";
				else if (map[currentX][currentY]==1)
					result+="1";
				else
					result+="0";
				currentY-=1;
			} else if (d=='3')
			{
				currentX-=1;
				if (currentX<0||currentX>3||currentY<0||currentY>3)
					result+="1";
				else if (map[currentX][currentY]==1)
					result+="1";
				else
					result+="0";
				currentX+=1;
			} 
		}
		cX=currentX;
		cY=currentY;
		String s=""+d;
		cT=Integer.parseInt(s);
		return(result);
	}
	public boolean ableGetPosition(String path,String robot)//if there is only one possible position, we know that it is the initial position
	{
		String temp;
		int count=0;
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				for (int k=0;k<4;k++)
				{
						temp=getPath(i,j,getCommand(path, k));
						if (temp.equals(robot))
						{
							count++;
			
						} else
						{
							isPossible[i][j][k]=false;
						}
				}
			}
		}
		//System.out.println("remaining possible "+count);
		if (count==1) return(true);
		return(false);
	}
	public String getPosition()
	{
		String result="";
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				for (int k=0;k<4;k++)
				{
					if (isPossible[i][j][k])
					{
						result=i+" "+j+" "+k;
						originalX=i;
						originalY=j;
						originalTheta=k;
						return(result);
					}
				}
			}
		}
		return(null);
	}
}
